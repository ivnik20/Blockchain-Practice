
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "GameObject.sol";
import "BaseStation.sol";

contract WarUnit is GameObject{
    constructor (BaseStation baseStation) public Accept{
        baseStation.AddUnit();
        motherBase = baseStation;
    }

    BaseStation motherBase;
    uint internal attackPoints = 0;

    function Attack (IGameObject toAttack) public Accept{
        toAttack.TakeAttack(attackPoints);
    }

    function Die(address winner) override public Accept{
        require(msg.sender == address(this) || msg.sender == address(motherBase));
        motherBase.DeleteUnit(address(this));
        winner.transfer(1, true, 128 + 32);
    }

    function DeletedByBase() external Accept{
        require(msg.sender == address(motherBase), 100, "Access violation!");
        Die(motherBase);
    }

     function GetAttackPoints() external virtual Accept returns(uint){
        return attackPoints;
    }
}
